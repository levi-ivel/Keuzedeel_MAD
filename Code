import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

void main() {
  runApp(const FileConverterApp());
}

class DarkModeProvider extends ChangeNotifier {
  bool _isDarkMode = false;

  bool get isDarkMode => _isDarkMode;

  void toggleDarkMode() {
    _isDarkMode = !_isDarkMode;
    notifyListeners();
  }
}

class FileConverterApp extends StatelessWidget {
  const FileConverterApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => DarkModeProvider(),
      child: Consumer<DarkModeProvider>(
        builder: (context, darkModeProvider, _) {
          return MaterialApp(
            title: 'Bestandsconverter',
            theme: darkModeProvider.isDarkMode ? ThemeData.dark() : ThemeData.light(),
            home: const HomePage(),
          );
        },
      ),
    );
  }
}


class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Bestandsconverter'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Spacer(),
            Text(
              'Bestandsconverter',
              style: Theme.of(context).textTheme.headlineMedium,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 40),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const CalculatePage()),
                );
              },
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 50),
              ),
              child: const Text('Omzet Pagina'),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const DarkModePage()),
                );
              },
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 50),
              ),
              child: const Text('Schakel Dark Mode'),
            ),
            const Spacer(),
          ],
        ),
      ),
    );
  }
}

class CalculatePage extends StatefulWidget {
  const CalculatePage({super.key});

  @override
  _CalculatePageState createState() => _CalculatePageState();
}

class _CalculatePageState extends State<CalculatePage> {
  double inputValue = 0;
  String selectedFromUnit = 'Megabytes';
  String selectedToUnit = 'Gigabytes';
  String result = '';

  final units = [
    'Bytes',
    'Kilobytes',
    'Megabytes',
    'Gigabytes',
    'Terabytes',
    'Petabytes',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Omzet Pagina'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              keyboardType: TextInputType.number,
              onChanged: (value) {
                setState(() {
                  inputValue = double.tryParse(value) ?? 0;
                });
              },
              decoration: const InputDecoration(
                labelText: 'Voer waarde in:',
              ),
            ),
            const SizedBox(height: 20),
            DropdownButton<String?>(
              value: selectedFromUnit,
              onChanged: (String? newValue) {
                if (newValue != null) {
                  setState(() {
                    selectedFromUnit = newValue;
                  });
                }
              },
              items: units.map<DropdownMenuItem<String?>>((String value) {
                return DropdownMenuItem<String?>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            const SizedBox(height: 20),
            DropdownButton<String?>(
              value: selectedToUnit,
              onChanged: (String? newValue) {
                if (newValue != null) {
                  setState(() {
                    selectedToUnit = newValue;
                  });
                }
              },
              items: units.map<DropdownMenuItem<String?>>((String value) {
                return DropdownMenuItem<String?>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  result = convert(inputValue, selectedFromUnit, selectedToUnit);
                });
              },
              child: const Text('Omzetten'),
            ),
            const SizedBox(height: 20),
            Text(
              'Resultaat: $result',
              style: Theme.of(context).textTheme.bodyLarge,
            ),
          ],
        ),
      ),
    );
  }

  String convert(double value, String fromUnit, String toUnit) {
    final unitsMap = {
      'Bytes': 1,
      'Kilobytes': 1024,
      'Megabytes': 1024 * 1024,
      'Gigabytes': 1024 * 1024 * 1024,
      'Terabytes': 1024 * 1024 * 1024 * 1024,
      'Petabytes': 1024 * 1024 * 1024 * 1024 * 1024,
    };

    final fromValue = unitsMap[fromUnit] ?? 1;
    final toValue = unitsMap[toUnit] ?? 1;

    return (value * fromValue / toValue).toString();
  }
}

class DarkModePage extends StatelessWidget {
  const DarkModePage({super.key});

  @override
  Widget build(BuildContext context) {
    final darkModeProvider = Provider.of<DarkModeProvider>(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dark Mode Pagina'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Dark Mode Schakelaar',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            Switch(
              value: darkModeProvider.isDarkMode,
              onChanged: (value) {
                darkModeProvider.toggleDarkMode();
              },
            ),
          ],
        ),
      ),
    );
  }
}
